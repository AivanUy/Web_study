/* 学习目标 */
/* 2 无参方法 */
.card {
    //等价于 .card()
    background: #F6F6F6;
    -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, 151, .58);
    box-shadow: 0 1px 2px rgba(151, 151, 151, 151, .58)
}

#wrap {
    .card; //等价于.card();
}

//其中.card 与 .card()是等价的。建议，为了避免代码混淆，应该写成
.card() {
    background: #F6F6F6;
    -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, 151, .58);
    box-shadow: 0 1px 2px rgba(151, 151, 151, 151, .58)
}

#wrap {
    .card();
}

/* . 和 # 都可以作为方法前缀；方法后面写不写() 看个人习惯 */

/* 3 默认参数方法 */
.border(@a: 10px, @b: 50px, @c: 30px, @color: #000) {
    border: solid 1px @color;
    box-shadow: @arguments; //指代的是 全部参数
}

#main {
    .border(0px, 5px, 30px, red)
}

#wrap {
    .border(0px);
}

#content {
    .border; //等价于 .border()
}

/* 4 方法的匹配模式 */
/* 与 面向对象中的多态很相似 */
.triangle(top, @width: 20px, @color: #000) {
    border-color: transparent transparent @color transparent;
}

.triangle(right, @width: 20px, @color: #000) {
    border-color: transparent @color transparent transparent;
}

.triangle(bottom, @width: 20px, @color#000) {
    border-color: @color transparent transparent transparent;
}

.triangle(left, @width: 20px, @color: #000) {
    border-color: transparent transparent transparent @color
}

.triangle(@_, @width: 20px, @color: #000) {
    border-style: solid;
    border: @width;
}

#main {
    .triangle(left, 50px, #999)
}

/* 5 方法的命名空间 */
//让方法更加规范
#card() {
    background: #723232;

    .d(@w: 300px) {
        width: @w;

        #a(@h: 300px) {
            height: @h; //可以使用上一层传进来的方法
        }
    }
}

#wrap {
    #card>.d>#a(100px); //父元素不能加 括号   >  标识的是引用儿子元素，直接血源关系的元素
}

#main {
    #card .d();
}

#con {
    //不得单独使用命名空间方法
    //.d() 如果前面没有引入命名空间 #card,将会报错

    #card;
    .d(20px); //必须先引入 #card
}

/* 6 方法的条件筛选 */
// Less 没有if else ，但是它有 when
#card {

    //and 运算符，相当于 与运算 && ，必须条件全部符合才会执行
    .border(@width, @color, @style) when(@width>100px) and(@color=#999) {
        border: @style @color @width
    }

    // not 运算符，相当于 非运算 ！，条件为 不符合才会执行
    .background(@color) when not (@color>=#222) {
        background: @color;
    }

    //， 逗号分隔符:相当于 或运算 || ，只要有一个符合条件就会执行
    .font(@size: 20px) when(@size > 50px),
    (@size < 100px) {
        font-size: @size;
    }
}

#main {
    #card>.border(200px, #999, solid);
    #card>.background(#333);
    #card>.font(20px)
}


/* 7 数量不定的参数 */

.boxShadow(...) {
    box-shadow: @arguments;
}

.textShadow(@a, ...) {
    text-shadow: @arguments;
}

#main {
    .boxShadow(1px, 4px, 30px, red);
    .textShadow(1px, 4px, 30px, red);
}

/* 8 方法使用important！ */
.border() {
    border: solid 1px red;
    margin: 50px;
}

#main {
    .border() !important;
}

/* 8 循环方法 */
.generate-columns(4);

.generate-columns(@n, @i: 1) when (@i =< @n) {
    .column-@{i} {
        width: (@i * 100% / @n);
    }

    .generate-columns(@n, (@i + 1));
}

/* 10 属性拼接方法 */
// + 代表的是 逗号
.boxShadow2() {
    box-shadow+: inset 0 0 10px #555;
}

.main {
    .boxShadow2();
    box-shadow+: 0 0 20px black;
}

// +-代表的是 空格；
.Animation() {
    transform+_: scale(2);
}

.main {
    .Animation();
    transform+_: rotate(15deg);
}

/* 11 实战技巧 */
.average(@x, @y) {
    @average: ((@x + @y)/2);
}

div {
    .average(16px, 50px); //调用 方法
    padding: @average; //使用返回值
}